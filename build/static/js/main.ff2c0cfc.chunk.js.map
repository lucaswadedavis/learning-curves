{"version":3,"sources":["sim.js","App.js","reportWebVitals.js","index.js"],"names":["sim","world","limit","w","rec","eff","i","index","Math","random","length","push","World","n","generator","shapeForChartJs","data","labels","map","d","datasets","UniformDistribution","uniform","className","width","height","legend","display","options","maintainAspectRatio","PoissonDistribution","poisson","NormalDistribution","normal","LogNormalDistribution","logNormal","ExponentialDistribution","exponential","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff2c0cfc.chunk.js","sourcesContent":["function sim(world, dimensions=1, limit=100) {\n  let w = [...world];\n  let rec = [];\n  let eff = 0;\n  for (let i = 0; i < limit; i++) {\n    const index = Math.random() * w.length | 0;\n    eff += w[index];\n    w[index] = 0;\n    rec.push(eff);\n  }\n  return rec; \n}\n\nexport { sim };\n","import { Bar, Line } from 'react-chartjs-2';\nimport { sim } from './sim';\nimport random from 'random';\nimport './App.css';\n\nfunction World(n=100, generator=() => 0.5) {\n  const w = [];\n  for (let i = 0; i < n; i++) {\n    w.push(generator());\n  }\n  return w;\n}\n\nfunction shapeForChartJs(data) {\n  const labels = data.map((d, i) => i);\n  return {\n    labels,\n    datasets: [{data}]\n  };\n}\n\nfunction UniformDistribution() {\n  const generator = random.uniform(0, 1);\n  const world = World(100, generator);\n  const simData = sim(world, 1, 1000);\n  const data = shapeForChartJs(simData);\n  return (\n    <div className=\"world-one\">\n      <h2>Uniform Distribution</h2>\n      <div>\n        <Bar\n          data={ shapeForChartJs(world) }\n          width={100}\n          height={100}\n          legend={{display:false}}\n          options={{ maintainAspectRatio: false }}\n          /> \n      </div>\n      <div>\n        <Line\n          data={ data }\n          width={100}\n          height={200}\n          legend={{display:false}}\n          options={{ maintainAspectRatio: false }}\n          /> \n      </div>\n    </div>\n  );\n}\n\nfunction PoissonDistribution() {\n  const generator = random.poisson();\n  const world = World(100, generator);\n  const simData = sim(world, 1, 1000);\n  const data = shapeForChartJs(simData);\n  return (\n    <div className=\"world-two\">\n      <h2>Poisson Distribution</h2>\n      <div>\n        <Bar\n          data={ shapeForChartJs(world) }\n          width={100}\n          height={100}\n          legend={{display:false}}\n          options={{ maintainAspectRatio: false }}\n          /> \n      </div>\n      <div>\n      <Line\n        data={ data }\n        width={100}\n        height={200}\n        legend={{display:false}}\n        options={{ maintainAspectRatio: false }}\n        /> \n      </div>\n    </div>\n  );\n}\n\nfunction NormalDistribution() {\n  const generator = random.normal();\n  const world = World(100, generator);\n  const simData = sim(world, 1, 1000);\n  const data = shapeForChartJs(simData);\n  return (\n    <div className=\"world-three\">\n      <h2>Normal Distribution</h2>\n      <div>\n        <Bar\n          data={ shapeForChartJs(world) }\n          width={100}\n          height={100}\n          legend={{display:false}}\n          options={{ maintainAspectRatio: false }}\n          /> \n      </div>\n      <div>\n      <Line\n        data={ data }\n        width={100}\n        height={200}\n        legend={{display:false}}\n        options={{ maintainAspectRatio: false }}\n        /> \n      </div>\n    </div>\n  );\n}\n\nfunction LogNormalDistribution() {\n  const generator = random.logNormal();\n  const world = World(100, generator);\n  const simData = sim(world, 1, 1000);\n  const data = shapeForChartJs(simData);\n  return (\n    <div className=\"log-normal-area\">\n      <h2>Log Normal Distribution</h2>\n      <div>\n        <Bar\n          data={ shapeForChartJs(world) }\n          width={100}\n          height={100}\n          legend={{display:false}}\n          options={{ maintainAspectRatio: false }}\n          /> \n      </div>\n      <div>\n      <Line\n        data={ data }\n        width={100}\n        height={200}\n        legend={{display:false}}\n        options={{ maintainAspectRatio: false }}\n        /> \n      </div>\n    </div>\n  );\n}\n\n\nfunction ExponentialDistribution() {\n  const generator = random.exponential();\n  const world = World(100, generator);\n  const simData = sim(world, 1, 1000);\n  const data = shapeForChartJs(simData);\n  return (\n    <div className=\"world-four\">\n      <h2>Exponential Distribution</h2>\n      <div>\n        <Bar\n          data={ shapeForChartJs(world) }\n          width={100}\n          height={100}\n          legend={{display:false}}\n          options={{ maintainAspectRatio: false }}\n          /> \n      </div>\n      <div>\n      <Line\n        data={ data }\n        width={100}\n        height={200}\n        legend={{display:false}}\n        options={{ maintainAspectRatio: false }}\n        /> \n      </div>\n    </div>\n  );\n}\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <UniformDistribution />\n      <PoissonDistribution />\n      <NormalDistribution />\n      <LogNormalDistribution />\n      <ExponentialDistribution />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}